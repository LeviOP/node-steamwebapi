{"version":3,"sources":["../src/index.ts","../src/types/getProfileCustomization.ts"],"sourcesContent":["// We don't use {} as a type, but as something to join with nothing.\n/* eslint @typescript-eslint/ban-types: 0 */\n\nimport fetch, { type RequestInit, type Response } from \"node-fetch\";\nimport { JSDOM } from \"jsdom\";\nimport { AchievementPercentages, AchievementPercentage } from \"./types/getGlobalAchievementPercentagesForApp.js\";\nimport { PlayerSummaries, PlayerSummary } from \"./types/getPlayerSummaries.js\";\nimport { FriendsList, Friend } from \"./types/getFriendsList.js\";\nimport { Achievement, AchievementWithStrings, PlayerAchievements, PlayerAchievementsFail } from \"./types/getPlayerAchievements.js\";\nimport { UserStats, UserStatsAchievement } from \"./types/getUserStatsForGame.js\";\nimport { Game, GameAppInfo, GameExtendedAppInfo, OwnedGames } from \"./types/getOwnedGames.js\";\nimport { RecentlyPlayedGames, RecentlyPlayedGame } from \"./types/getRecentlyPlayedGames.js\";\nimport { ActiveCustomization, InactiveCustomization, ProfileCustomizations, ProfileCustomizationsPurchased, TypeSlotMap, CustomizationSlot, MyGuidesSlot, ProfileTheme, Customization, FavoriteGameSlot, ItemShowcaseSlot, CustomInfoBoxSlot, FavoriteGroupSlot, FavoriteGuideSlot, GameCollectorSlot, VideoShowcaseSlot, BadgeCollectorSlot, ProfilePreferences, ReviewShowcaseSlot, ArtworkShowcaseSlot, ItemsUpForTradeSlot, WorkshopShowcaseSlot, SteamYearInReviewSlot, MyWorkshopShowcaseSlot, PurchasedCustomization, ScreenshotShowcaseSlot, AchievementShowcaseSlot, ActiveCustomizationBase, ActiveCustomizationKnown, CustomizationSlotUnknown, CompletionistShowcaseSlot, ActiveCustomizationUnknown, FeaturedArtworkShowcaseSlot, CustomizationType, BanContentCheckResult } from \"./types/getProfileCustomization.js\";\n\nexport {\n    AchievementPercentages, AchievementPercentage,\n    PlayerSummaries, PlayerSummary,\n    FriendsList, Friend,\n    Achievement, AchievementWithStrings, PlayerAchievements, PlayerAchievementsFail,\n    UserStats, UserStatsAchievement,\n    Game, GameAppInfo, GameExtendedAppInfo, OwnedGames,\n    RecentlyPlayedGames, RecentlyPlayedGame,\n    ActiveCustomization, InactiveCustomization, ProfileCustomizations, ProfileCustomizationsPurchased, TypeSlotMap, CustomizationSlot, MyGuidesSlot, ProfileTheme, Customization, FavoriteGameSlot, ItemShowcaseSlot, CustomInfoBoxSlot, FavoriteGroupSlot, FavoriteGuideSlot, GameCollectorSlot, VideoShowcaseSlot, BadgeCollectorSlot, ProfilePreferences, ReviewShowcaseSlot, ArtworkShowcaseSlot, ItemsUpForTradeSlot, WorkshopShowcaseSlot, SteamYearInReviewSlot, MyWorkshopShowcaseSlot, PurchasedCustomization, ScreenshotShowcaseSlot, AchievementShowcaseSlot, ActiveCustomizationBase, ActiveCustomizationKnown, CustomizationSlotUnknown, CompletionistShowcaseSlot, ActiveCustomizationUnknown, FeaturedArtworkShowcaseSlot, CustomizationType, BanContentCheckResult\n};\n\nexport interface Options {\n    apiBase?: string;\n    token?: string;\n    fetchOptions?: RequestInit;\n}\n\nexport interface Call {\n    interfaceName: string;\n    method: string;\n    version: number;\n    options: Record<string, string | boolean | number | undefined>;\n}\n\ntype ResponseWrapper<T, N extends string = \"response\"> = {\n    [key in N]: T;\n};\n\ntype ResponseWrapperEmpty<T, N extends string = \"response\"> = {\n    [key in N]?: T;\n};\n\nexport default class SteamWebAPI {\n    API_BASE: string = \"http://api.steampowered.com\";\n    private readonly token?: string;\n    fetchOptions: RequestInit;\n\n    constructor(optionsOrToken?: Options | string) {\n        if (typeof optionsOrToken === \"object\") {\n            const { apiBase, token, fetchOptions = {} } = optionsOrToken;\n            if (apiBase !== undefined) this.API_BASE = apiBase;\n            if (token !== undefined) this.token = token;\n            this.fetchOptions = fetchOptions;\n\n            return;\n        }\n\n        if (typeof optionsOrToken === \"string\") this.token = optionsOrToken;\n\n        this.fetchOptions = {};\n    }\n\n    async get({ interfaceName, method, version, options }: Call): Promise<Response> {\n        const o: Record<string, string> = {};\n        for (const key in options) {\n            const value = options[key as keyof typeof options];\n            if (value === undefined) continue;\n            o[key] = value.toString();\n        }\n\n        const params = new URLSearchParams(o);\n        const res = await fetch(`${this.API_BASE}/${interfaceName}/${method}/v${version}?${params}`, this.fetchOptions);\n        return res;\n    }\n\n    async getGlobalAchievementPercentagesForApp({ gameid }: { gameid: number }): Promise<ResponseWrapperEmpty<AchievementPercentages, \"achievementpercentages\">> {\n        const res = await this.get({\n            interfaceName: \"ISteamUserStats\",\n            method: \"GetGlobalAchievementPercentagesForApp\",\n            version: 2,\n            options: {\n                gameid\n            }\n        });\n\n        if (!res.ok) throw SteamWebAPI.parseError(await res.text());\n\n        const json = await res.json() as ResponseWrapperEmpty<AchievementPercentages, \"achievementpercentages\">;\n        return json;\n    }\n\n    async getPlayerSummaries({ steamids }: { steamids: string | string[] }): Promise<ResponseWrapper<PlayerSummaries>> {\n        const key = this.token;\n        if (key === undefined) throw Error(\"GetPlayerSummaries requires a token!\");\n\n        if (typeof steamids !== \"string\") steamids = steamids.join(\",\");\n\n        const res = await this.get({\n            interfaceName: \"ISteamUser\",\n            method: \"GetPlayerSummaries\",\n            version: 2,\n            options: {\n                key,\n                steamids\n            }\n        });\n\n        if (!res.ok) throw SteamWebAPI.parseError(await res.text());\n\n        const json = await res.json() as ResponseWrapper<PlayerSummaries>;\n        return json;\n    }\n\n    async getFriendsList({ steamid, relationship }: { steamid: string, relationship: string }): Promise<ResponseWrapper<FriendsList, \"friendslist\">> {\n        const key = this.token;\n        if (key === undefined) throw Error(\"GetFriendList requires a token!\");\n\n        const res = await this.get({\n            interfaceName: \"ISteamUser\",\n            method: \"GetFriendList\",\n            version: 1,\n            options: {\n                key,\n                steamid,\n                relationship\n            }\n        });\n\n        if (!res.ok) throw SteamWebAPI.parseError(await res.text());\n\n        const json = await res.json() as ResponseWrapper<FriendsList, \"friendslist\">;\n        return json;\n    }\n\n    async getPlayerAchievements<L extends (string | undefined) = undefined>({ steamid, appid, l }: {\n        steamid: string,\n        appid: number,\n        l?: L\n    }): Promise<ResponseWrapper<PlayerAchievementsFail | PlayerAchievements<(L extends string ? AchievementWithStrings : Achievement)>, \"playerstats\">> {\n        const key = this.token;\n        if (key === undefined) throw Error(\"GetPlayerAchievements requires a token!\");\n\n        const res = await this.get({\n            interfaceName: \"ISteamUserStats\",\n            method: \"GetPlayerAchievements\",\n            version: 1,\n            options: {\n                key,\n                steamid,\n                appid,\n                l\n            }\n        });\n\n        if (!res.ok) throw SteamWebAPI.parseError(await res.text());\n\n        const json = await res.json() as ResponseWrapper<PlayerAchievementsFail | PlayerAchievements<(L extends string ? AchievementWithStrings : Achievement)>, \"playerstats\">;\n        return json;\n    }\n\n    async getUserStatsForGame({ steamid, appid }: { steamid: string, appid: number }): Promise<ResponseWrapperEmpty<UserStats, \"playerstats\">> {\n        const key = this.token;\n        if (key === undefined) throw Error(\"Token required!\");\n\n        const res = await this.get({\n            interfaceName: \"ISteamUserStats\",\n            method: \"GetUserStatsForGame\",\n            version: 2,\n            options: {\n                key,\n                steamid,\n                appid\n            }\n        });\n\n        if (!res.ok) throw SteamWebAPI.parseError(await res.text());\n\n        const json = await res.json() as ResponseWrapperEmpty<UserStats, \"playerstats\">;\n        return json;\n    }\n\n    async getOwnedGames<appinfo extends (boolean | undefined) = undefined, extended extends (boolean | undefined) = undefined>\n    ({ steamid, include_appinfo, include_played_free_games, include_extended_appinfo }: {\n        steamid: string,\n        include_appinfo?: appinfo,\n        include_played_free_games?: boolean,\n        include_extended_appinfo?: extended\n    }): Promise<ResponseWrapper<OwnedGames<Game & (appinfo extends true ? (extended extends true ? GameAppInfo & GameExtendedAppInfo : GameAppInfo) : {})>>> {\n        const key = this.token;\n        if (key === undefined) throw Error(\"GetOwnedGames requires a token!\");\n\n        const res = await this.get({\n            interfaceName: \"IPlayerService\",\n            method: \"GetOwnedGames\",\n            version: 1,\n            options: {\n                key,\n                steamid,\n                include_appinfo,\n                include_played_free_games,\n                include_extended_appinfo\n            }\n        });\n\n        if (!res.ok) throw SteamWebAPI.parseError(await res.text());\n\n        const json = await res.json() as ResponseWrapper<OwnedGames<Game & (appinfo extends true ? (extended extends true ? GameAppInfo & GameExtendedAppInfo : GameAppInfo) : {})>>;\n        return json;\n    }\n\n    async getRecentlyPlayedGames({ steamid, count }: { steamid: string, count: number }): Promise<ResponseWrapper<RecentlyPlayedGames>> {\n        const key = this.token;\n        if (key === undefined) throw Error(\"GetRecentlyPlayedGames requires a token!\");\n\n        const res = await this.get({\n            interfaceName: \"IPlayerService\",\n            method: \"GetRecentlyPlayedGames\",\n            version: 1,\n            options: {\n                key,\n                steamid,\n                count\n            }\n        });\n\n        if (!res.ok) throw SteamWebAPI.parseError(await res.text());\n\n        const json = await res.json() as ResponseWrapper<RecentlyPlayedGames>;\n        return json;\n    }\n\n    async getProfileCustomization<inactive extends (boolean | undefined) = undefined, purchased extends (boolean | undefined) = undefined>\n    ({ steamid, include_inactive_customizations, include_purchased_customizations }: {\n        steamid: string,\n        include_inactive_customizations?: inactive,\n        include_purchased_customizations?: purchased\n    }): Promise<ResponseWrapper<ProfileCustomizations<(inactive extends true ? (InactiveCustomization | ActiveCustomization) : ActiveCustomization)> & (purchased extends true ? ProfileCustomizationsPurchased : {})>> {\n        const key = this.token;\n        if (key === undefined) throw Error(\"GetRecentlyPlayedGames requires a token!\");\n\n        const res = await this.get({\n            interfaceName: \"IPlayerService\",\n            method: \"GetProfileCustomization\",\n            version: 1,\n            options: {\n                steamid,\n                include_inactive_customizations,\n                include_purchased_customizations\n            }\n        });\n\n        if (!res.ok) throw SteamWebAPI.parseError(await res.text());\n\n        const json = await res.json() as ResponseWrapper<ProfileCustomizations<(inactive extends true ? (InactiveCustomization | ActiveCustomization) : ActiveCustomization)> & (purchased extends true ? ProfileCustomizationsPurchased : {})>;\n        return json;\n    }\n\n    static parseError(body: string): Error {\n        const document = new JSDOM(body).window.document;\n\n        const name = document.querySelector(\"h1\")?.textContent ?? null;\n        const message = Array.from(document.body.childNodes).slice(1).reduce((p, c) => p + c.textContent, \"\");\n\n        const error = new Error(message);\n        if (name !== null) error.name = name;\n\n        return error;\n    }\n}\n","export enum BanContentCheckResult {\n    NotScanned = 0,\n    Reset = 1,\n    NeedsChecking = 2,\n    VeryUnlikely = 5,\n    Unlikely = 30,\n    Possible = 50,\n    Likely = 75,\n    VeryLikely = 100\n}\n\nexport enum CustomizationType {\n    RarestAchievementShowcase = 1,\n    GameCollector = 2,\n    ItemShowcase = 3,\n    ItemsUpForTrade = 4,\n    BadgeCollector = 5,\n    FavoriteGame = 6,\n    ScreenshotShowcase = 7,\n    CustomInfoBox = 8,\n    FavoriteGroup = 9,\n    ReviewShowcase = 10,\n    WorkshopShowcase = 11,\n    MyWorkshopShowcase = 12,\n    ArtworkShowcase = 13,\n    VideoShowcase = 14,\n    FavoriteGuide = 15,\n    MyGuides = 16,\n    AchievementShowcase = 17,\n    SalienStats = 20,\n    AwardsShowcase = 21,\n    FeaturedArtworkShowcase = 22,\n    CompletionistShowcase = 23,\n    SteamYearInReview = 24\n}\n\nexport interface TypeSlotMap {\n    [CustomizationType.RarestAchievementShowcase]: undefined;\n    [CustomizationType.GameCollector]: GameCollectorSlot[];\n    [CustomizationType.ItemShowcase]: ItemShowcaseSlot[];\n    [CustomizationType.ItemsUpForTrade]: ItemsUpForTradeSlot[];\n    [CustomizationType.BadgeCollector]: BadgeCollectorSlot[];\n    [CustomizationType.FavoriteGame]: [FavoriteGameSlot];\n    [CustomizationType.ScreenshotShowcase]: ScreenshotShowcaseSlot[];\n    [CustomizationType.CustomInfoBox]: [CustomInfoBoxSlot];\n    [CustomizationType.FavoriteGroup]: [FavoriteGroupSlot];\n    [CustomizationType.ReviewShowcase]: [ReviewShowcaseSlot];\n    [CustomizationType.WorkshopShowcase]: [WorkshopShowcaseSlot];\n    [CustomizationType.MyWorkshopShowcase]: [MyWorkshopShowcaseSlot];\n    [CustomizationType.ArtworkShowcase]: ArtworkShowcaseSlot[];\n    [CustomizationType.VideoShowcase]: VideoShowcaseSlot[];\n    [CustomizationType.FavoriteGuide]: [FavoriteGuideSlot];\n    [CustomizationType.MyGuides]: MyGuidesSlot[];\n    [CustomizationType.AchievementShowcase]: AchievementShowcaseSlot[];\n    [CustomizationType.SalienStats]: undefined;\n    [CustomizationType.AwardsShowcase]: undefined;\n    [CustomizationType.FeaturedArtworkShowcase]: FeaturedArtworkShowcaseSlot[];\n    [CustomizationType.CompletionistShowcase]: CompletionistShowcaseSlot[];\n    [CustomizationType.SteamYearInReview]: [SteamYearInReviewSlot] | undefined;\n}\n\ntype Values<T> = T[keyof T];\n\nexport type ActiveCustomization =\n    | Values<{ [K in keyof TypeSlotMap]: ActiveCustomizationKnown<K> }>\n    | ActiveCustomizationUnknown;\n\nexport interface CustomizationSlot {\n    slot: number;\n}\n\nexport interface GameCollectorSlot extends CustomizationSlot {\n    appid: number;\n}\n\nexport interface ItemShowcaseSlot extends CustomizationSlot {\n    appid: number;\n    item_assetid: string;\n    item_contextid: string;\n    item_classid: string;\n    item_instanceid: string;\n}\n\nexport interface ItemsUpForTradeSlot extends CustomizationSlot {\n    appid: number;\n    item_assetid: string;\n    item_contextid: string;\n    item_classid: string;\n    item_instanceid: string;\n}\n\nexport interface BadgeCollectorSlot extends CustomizationSlot {\n    appid?: number;\n    badgeid?: number;\n}\n\nexport interface FavoriteGameSlot extends CustomizationSlot {\n    appid: number;\n}\n\nexport interface ScreenshotShowcaseSlot extends CustomizationSlot {\n    publishedfileid?: string;\n}\n\nexport interface CustomInfoBoxSlot extends CustomizationSlot {\n    notes: string;\n    title: string;\n    ban_check_result: BanContentCheckResult;\n}\n\nexport interface FavoriteGroupSlot extends CustomizationSlot {\n    accountid: number;\n}\n\nexport interface ReviewShowcaseSlot extends CustomizationSlot {\n    appid: number;\n}\n\nexport interface WorkshopShowcaseSlot extends CustomizationSlot {\n    appid: number;\n    publishedfileid: string;\n}\n\nexport interface MyWorkshopShowcaseSlot extends CustomizationSlot {\n    appid: number;\n    publishedfileid: string;\n}\n\nexport interface ArtworkShowcaseSlot extends CustomizationSlot {\n    publishedfileid?: string;\n}\n\nexport interface VideoShowcaseSlot extends CustomizationSlot {\n    publishedfileid?: string;\n}\n\nexport interface FavoriteGuideSlot extends CustomizationSlot {\n    appid: number;\n    publishedfileid: string;\n}\n\nexport interface MyGuidesSlot extends CustomizationSlot {\n    appid: number;\n    publishedfileid: string;\n}\n\nexport interface AchievementShowcaseSlot extends CustomizationSlot {\n    appid: number;\n    title: string;\n}\n\nexport interface FeaturedArtworkShowcaseSlot extends CustomizationSlot {\n    publishedfileid: string;\n}\n\nexport interface CompletionistShowcaseSlot extends CustomizationSlot {\n    appid: number;\n}\n\nexport interface SteamYearInReviewSlot extends CustomizationSlot {\n    replay_year: number;\n}\n\nexport interface ProfileCustomizations<C extends Customization> {\n    customizations?: C[];\n    slots_available: number;\n    profile_theme: ProfileTheme;\n    profile_preferences: ProfilePreferences;\n}\n\nexport interface Customization {\n    customization_type: number;\n    active: boolean;\n    level: number;\n}\n\nexport interface ActiveCustomizationBase extends Customization {\n    active: true;\n    large: boolean;\n    customization_style: number;\n    purchaseid: string;\n}\n\nexport interface InactiveCustomization extends Customization {\n    active: false;\n}\n\nexport interface ActiveCustomizationKnown<C extends keyof TypeSlotMap> extends ActiveCustomizationBase {\n    customization_type: C;\n    slots: TypeSlotMap[C];\n}\n\ntype Enumerate<N extends number, Acc extends number[] = []> = Acc[\"length\"] extends N\n  ? Acc[number]\n  : Enumerate<N, [...Acc, Acc[\"length\"]]>\n\ntype IntRange<F extends number, T extends number> = Exclude<Enumerate<T>, Enumerate<F>>\n\nexport interface ActiveCustomizationUnknown extends ActiveCustomizationBase {\n    customization_type: Exclude<IntRange<0, 30>, keyof TypeSlotMap>;\n    slots?: CustomizationSlotUnknown[];\n}\n\nexport interface CustomizationSlotUnknown extends CustomizationSlot {\n    appid?: number;\n    publishedfileid?: string;\n    item_assetid?: string;\n    item_contextid?: string;\n    notes?: string;\n    title?: string;\n    accountid?: number;\n    badgeid?: number;\n    border_color?: number;\n    item_classid?: string;\n    item_instanceid?: string;\n    ban_check_result?: BanContentCheckResult;\n    replay_year?: number;\n}\n\nexport interface ProfileCustomizationsPurchased {\n    purchased_customizations?: PurchasedCustomization[];\n}\n\nexport interface PurchasedCustomization {\n    purchaseid: string;\n    customization_type: CustomizationType | number;\n    level: number;\n}\n\nexport interface ProfileTheme {\n    theme_id: string;\n    title: string;\n}\n\nexport interface ProfilePreferences {\n    hide_profile_awards: boolean;\n}\n\n"],"mappings":"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","names":["BanContentCheckResult","CustomizationType"]}